#!/bin/bash

# Purpose: take the current state of the branch, make it a new (given)
# branch, reset and merge in that branch with "no-ff"


set -u
set -e

usage() {
cat <<EOF
usage:  git remerge-as-branch BRANCH

Retroactively create a feature branch.

For any commits that have not, yet, been pushed, move them onto a
branch, reset the current branch to the pushed status and merge the
branch using --no-ff.

This requires a branch which is a downstream and has appropriately
recorded upstream.  It's most useful for small changes that you make
on master and then decide what to call them.

EOF
}

if [ -z "$*" ] ; then
    usage
    exit 1
fi

branch="$1"

pop=false

if [ -n "`git ls-files -m`" ] ; then
    git stash save "Saving uncommited state to merge $branch"
    pop=true
fi

current=`git rev-parse --abbrev-ref HEAD`
remote=`git config --get branch.$current.remote`
originref=`git config --get branch.$current.merge`
originbranch=`echo $originref | sed -e 's#refs/heads/##g'`


git branch $branch
git reset --hard $remote/$originbranch
git merge --no-ff $branch

if $pop ; then
    git stash pop
fi
